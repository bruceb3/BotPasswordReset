#!/usr/bin/env perl
# vim: ft=perl

use strict;
use warnings;
use Bot;

BEGIN {
*exp_continue = *Expect::exp_continue;
*exp_continue_timeout = *Expect::exp_continue_timeout;
}


sub Bot::hook {
    my ($expect, $hostname) = @_;
    my $rt;

    my $user = 'szbrhv';
    my $password = 'foobar1003';

    $rt = $expect->execute({ command => 'uname -s' });
    if ($rt->ok) {
        if ($rt->first_line eq 'AIX') {
            $rt = ::reset_password($expect, $user, $password);
            $rt = $expect->execute({ command => "pwdadm -c $user" });
        }
        elsif ($rt->first_line eq 'SunOS') {
            $rt = $expect->execute({ command => 'uname -r' });
            if ($rt->ok and $rt->first_line eq '5.10') {
                $rt = $expect->execute({ command => "passwd -u $user" });
                return $rt unless $rt->ok;
            }
            $rt = $expect->execute({ command => 'ls -l /etc/security/passhistory' });
            if ($rt->ok) {
                $rt = ::remove_user_from_passhistory($expect, $user);
            }
            return $rt unless $rt->ok;
            $rt = ::reset_password($expect, $user, $password);
        }
        elsif ($rt->first_line eq 'HP-UX') {
            $rt = ::hp_reset_password($expect, $user, $password);
        }
        elsif ($rt->first_line eq 'Linux') {
            $rt = ::reset_password($expect, $user, $password);
        }
        else {
        }
    }
    return $rt;
}

package main;

sub happy {
    my $rt = shift;
    $rt->ok && $rt->return_code == 0;
}

sub remove_user_from_passhistory {
    my ($expect, $username) = @_;
    my $rt = $expect->execute({ command => "egrep '^$username:' /etc/security/passhistory" });
    if (happy($rt)) { # found the user in the passhistory file.
        $rt = $expect->execute({ command => "sed '/^$username:/d' /etc/security/passhistory > /tmp/botpass" });
        if (happy($rt)) {
            $rt = $expect->execute({ command => "mv /tmp/botpass /etc/security/passhistory" });
        }
    }
    return $rt;
}

sub hp_reset_password {
}

sub reset_password {
    my ($expect, $username, $password) = @_;
    my $number_of_passwords_given = 0;

    $expect->send("passwd $username");
    $expect->expect( 
        [ qr/[nN]ew [pP]assword:/m, sub {
                my ($pty) = @_;
                $number_of_passwords_given++;
                $pty->send($password);
                return exp_continue;
            }, $expect ],

        [ qr/Re-enter New password:/m, sub {
                my ($pty) = @_;
                $number_of_passwords_given++;
                $pty->send($password);
                return;
            }, $expect ]
    );
    my $status = $expect->wait_for_shell_prompt;
    return $status;
}
