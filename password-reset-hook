#!/usr/bin/env perl
# vim: ft=perl

use strict;
use warnings;
use Bot;
use ResetPassword;

BEGIN {
    *exp_continue = *Expect::exp_continue;
    *exp_continue_timeout = *Expect::exp_continue_timeout;
}


sub Bot::hook {
    my ($expect, $hostname) = @_;
    my $rt;

    my $user = 'szbrhv';
    my $password = 'foobar1003';

    $rt = $expect->execute({ command => 'uname -s' });
    if ($rt->worked) {
        if ($rt->first_line eq 'AIX') {
#            use ResetPassword::AIX qw[ reset_password ];
#            try {
#                reset_password($expect, $user, $password);
#            } catch {
#            };
        }
        elsif ($rt->first_line eq 'SunOS') {
            use ResetPassword::Solaris qw[ remove_user_from_passhistory ];
            my $username = 'foobar'; # XXX don't forgot to implement the code for usernames.
            try {
                remove_user_from_passhistory($expect, $username);
            } catch {
            };
        }
    }
    return $rt;
}

package main;


sub hp_reset_password {
}

sub reset_password {
    my ($expect, $username, $password) = @_;
    my $number_of_passwords_given = 0;

    $expect->send("passwd $username");
    $expect->expect( 
        [ qr/[nN]ew [pP]assword:/m, sub {
                my ($pty) = @_;
                $number_of_passwords_given++;
                $pty->send($password);
                return exp_continue;
            }, $expect ],

        [ qr/Re-enter New password:/m, sub {
                my ($pty) = @_;
                $number_of_passwords_given++;
                $pty->send($password);
                return;
            }, $expect ]
    );
    my $status = $expect->wait_for_shell_prompt;
    return $status;
}
